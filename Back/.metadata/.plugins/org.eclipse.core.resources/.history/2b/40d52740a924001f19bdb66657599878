package com.mart.payment.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mart.payment.response.PaymentLinkResponse;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;

@RestController
@RequestMapping("/payment")
public class PaymentController {
	
	String apiKey;
	
	String apiSecret;
	
	@PostMapping("/payments")
	public ResponseEntity<PaymentLinkResponse>createPaymentLink(@RequestHeader("Authorization") String jwt) throws RazorpayException {
		
		Order order=orderService.findOrderById(orderId);
		 try {
		      // Instantiate a Razorpay client with your key ID and secret
		      RazorpayClient razorpay = new RazorpayClient("rzp_test_kTsRSaDC8hwztX", "LieoD1s9mxMIv569PcgRDMcU");
//		      RazorpayClient razorpay = new RazorpayClient(apiKey, apiSecret);

		      // Create a JSON object with the payment link request parameters
		      JSONObject paymentLinkRequest = new JSONObject();
		      paymentLinkRequest.put("amount",order.getTotalPrice()* 100);
		      paymentLinkRequest.put("currency","INR");    
//		      paymentLinkRequest.put("expire_by",1691097057);
//		      paymentLinkRequest.put("reference_id",order.getId().toString());
		     

		      // Create a JSON object with the customer details
		      JSONObject customer = new JSONObject();
		      customer.put("name",order.getUser().getFirstName()+" "+order.getUser().getLastName());
		      customer.put("contact",order.getUser().getMobile());
		      customer.put("email",order.getUser().getEmail());
		      paymentLinkRequest.put("customer",customer);

		      // Create a JSON object with the notification settings
		      JSONObject notify = new JSONObject();
		      notify.put("sms",true);
		      notify.put("email",true);
		      paymentLinkRequest.put("notify",notify);

		      // Set the reminder settings
		      paymentLinkRequest.put("reminder_enable",true);

		      // Set the callback URL and method
//		      paymentLinkRequest.put("callback_url","https://shopwithzosh.vercel.app/payment/"+orderId);
		      paymentLinkRequest.put("callback_url","http://localhost:3000/payment/"+orderId);
		      paymentLinkRequest.put("callback_method","get");

		      // Create the payment link using the paymentLink.create() method
		      PaymentLink payment = razorpay.paymentLink.create(paymentLinkRequest);
		      
		      String paymentLinkId = payment.get("id");
		      String paymentLinkUrl = payment.get("short_url");
		      
//		      PaymentLinkResponse res=new PaymentLinkResponse(paymentLinkUrl,paymentLinkId);
//		      
//		      PaymentLink fetchedPayment = razorpay.paymentLink.fetch(paymentLinkId);
//		      
//		      order.setOrderId(fetchedPayment.get("order_id"));
//		      orderRepository.save(order);
//		      
//		   // Print the payment link ID and URL
//		      System.out.println("Payment link ID: " + paymentLinkId);
//		      System.out.println("Payment link URL: " + paymentLinkUrl);
//		      System.out.println("Order Id : "+fetchedPayment.get("order_id")+fetchedPayment);
		      
		      PaymentLinkResponse res=new PaymentLinkResponse();
		      res.setPayment_link_id(paymentLinkId);
		      res.setPayment_link_url(paymentLinkUrl);
		      
		      
		      return new ResponseEntity<PaymentLinkResponse>(res,HttpStatus.ACCEPTED);
		      
		    } catch (RazorpayException e) {
		    	
		      System.out.println("Error creating payment link: " + e.getMessage());
		      throw new RazorpayException(e.getMessage());
		    }
	}
	
  @GetMapping("/payments")
  public ResponseEntity<ApiResponse> redirect(@RequestParam(name="payment_id") String paymentId,@RequestParam("order_id")Long orderId) throws RazorpayException, OrderException {
//	  RazorpayClient razorpay = new RazorpayClient("rzp_test_kTsRSaDC8hwztX", "LieoD1s9mxMIv569PcgRDMcU");
	  RazorpayClient razorpay = new RazorpayClient(apiKey, apiSecret);
	  Order order =orderService.findOrderById(orderId);
	  
	  System.out.println("***********************************************");
	  System.out.println("payment Id: "+ paymentId + "--Order Id: "+ orderId );
	
	  try {
		Payment payment = razorpay.payments.fetch(paymentId);
		System.out.println("payment details --- "+payment);
		
		if(payment.get("status").equals("captured")) {
			System.out.println("payment details --- "+payment+payment.get("status"));
		  
			order.getPaymentDetails().setPaymentId(paymentId);
//			order.getPaymentDetails().setStatus(PaymentStatus.COMPLETED);
			order.getPaymentDetails().setStatus("COMPLETED");
//			order.setOrderStatus(OrderStatus.PLACED);
			order.setOrderStatus("PLACED");
//			order.setOrderItems(order.getOrderItems());
//			System.out.println(order.getPaymentDetails().getStatus()+"payment status ");
			orderRepository.save(order);
		}
		
		  ApiResponse res=new ApiResponse("your order get placed", true);
			
//		  res.setMessage("your order get placed");
//		  res.setStatus(true);
	      return new ResponseEntity<ApiResponse>(res,HttpStatus.OK);
	      
	} catch (Exception e) {
		System.out.println("error payment -------- ");
//		new RedirectView("https://shopwithzosh.vercel.app/payment/failed");
		throw new RazorpayException(e.getMessage());
	}

  }
}
